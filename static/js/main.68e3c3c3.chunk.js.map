{"version":3,"sources":["components/cv-intro.js","components/modeButtons.js","components/cv-summary.js","components/cv-skills.js","components/cv-education.js","components/cv-experience.js","components/cv-custom.js","App.js","index.js"],"names":["Intro","props","state","name","contactPhone","email","linkedin","location","getCurrentMode","bind","updateState","updateField","renderMode","renderEditMode","renderPreviewMode","document","querySelector","classList","contains","currentState","newValue","this","setState","e","target","className","value","type","rows","onChange","placeholder","icon","faPhone","size","faEnvelope","href","faLinkedin","faMapMarkerAlt","mode","React","Component","ModeButtons","onClick","toggleFunction","Summary","enableSummary","summaryTextarea","deleteSummary","onInput","element","style","height","scrollHeight","faTrash","faPlusSquare","window","confirm","Skills","enableSkills","skill","skillId","skillText","skills","addSkill","deleteSkill","deleteSkillsState","swiftSkillNumber","renderSkill","map","task","key","length","elementId","parentNode","id","newSkills","splice","number","finalSkills","currentSkill","Education","enableEducation","educationArr","currentEd","institution","degree","city","startDate","Date","endDate","mentions","handleStartDate","handleEndDate","addNewEducation","renderEducationItem","deleteEducationItem","deleteEducationState","swiftEducationItemNumber","educationItem","selected","dateFormat","showMonthYearPicker","showFullMonthYearPicker","date","toUpdate","temp","Object","keys","child","alert","item","Moment","format","newEducationItems","finalEducationItems","currentItem","Experience","enableExperience","experienceArr","currentExp","company","jobTitle","addNewExperience","renderExperienceItem","deleteExperienceItem","deleteExperienceState","swiftExperienceItemNumber","experienceItem","newExperienceItems","finalExperienceItems","Custom","enableCustom","customArr","currentCustom","customDescription","title","description","addNewCustom","renderCustomItem","deleteCustomState","newCustomItems","App","currentMode","toggleButtonClass","Array","from","querySelectorAll","button","remove","add","ReactDOM","render","StrictMode","getElementById"],"mappings":"2PAsGeA,E,kDA9FX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,KAAM,GACNC,aAAc,GACdC,MAAO,GACPC,SAAU,GACVC,SAAU,IAGd,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBACnB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAClB,EAAKI,eAAiB,EAAKA,eAAeJ,KAApB,gBACtB,EAAKK,kBAAoB,EAAKA,kBAAkBL,KAAvB,gBAfX,E,kDAkBlB,WAII,OAFiBM,SAASC,cAAc,eAE1BC,UAAUC,SAAS,iBACtB,OAGA,Y,yBAIf,SAAYC,EAAcC,GACtBC,KAAKC,SAAL,eACKH,EAAeC,M,yBAIxB,SAAYG,GACRF,KAAKX,YAAYa,EAAEC,OAAOC,UAAWF,EAAEC,OAAOE,S,4BAKlD,WACI,OACI,0BAASD,UAAU,WAAnB,UAEQ,qBAAKA,UAAU,OAAf,SAEI,0BAAUA,UAAU,OAAOE,KAAK,OAAOC,KAAK,IAAIC,SAAUR,KAAKV,YAAae,MAAOL,KAAKnB,MAAMC,KAAM2B,YAAY,WAEpH,sBAAKL,UAAU,qBAAf,UACI,uBAAOA,UAAU,gBAAjB,2BACA,0BAAUA,UAAU,eAAeI,SAAUR,KAAKV,YAAagB,KAAK,OAAOC,KAAK,IAAMF,MAAOL,KAAKnB,MAAME,aAAc0B,YAAY,UAClI,uBAAOL,UAAU,gBAAjB,4BACA,0BAAUA,UAAU,QAAQE,KAAK,QAAQC,KAAK,IAAKC,SAAUR,KAAKV,YAAae,MAAOL,KAAKnB,MAAMG,MAAQyB,YAAY,UACrH,uBAAOL,UAAU,gBAAjB,+CACA,0BAAUA,UAAU,WAAWE,KAAK,OAAOC,KAAK,IAAIC,SAAUR,KAAKV,YAAae,MAAOL,KAAKnB,MAAMI,SAAUwB,YAAY,uBACxH,uBAAOL,UAAU,gBAAjB,mCACA,0BAAUA,UAAU,WAAWE,KAAK,OAAOC,KAAK,IAAIC,SAAUR,KAAKV,YAAae,MAAOL,KAAKnB,MAAMK,SAAWuB,YAAY,qB,+BAM7I,WACI,OACI,0BAASL,UAAU,WAAnB,UACQ,qBAAKA,UAAU,OAAf,SACI,qBAAIA,UAAU,OAAd,cAAuBJ,KAAKnB,MAAMC,UAEtC,sBAAKsB,UAAU,qBAAf,UACI,uBAAMA,UAAU,gBAAhB,UAAgC,mBAAGA,UAAU,eAAb,SAA6BJ,KAAKnB,MAAME,eAAiB,cAAC,IAAD,CAAiB2B,KAAMC,IAASC,KAAK,UAC9H,uBAAMR,UAAU,gBAAhB,UAAgC,mBAAGA,UAAU,QAAb,SAAsBJ,KAAKnB,MAAMG,QAAjE,IAA4E,cAAC,IAAD,CAAiB0B,KAAMG,IAAYD,KAAK,UACpH,uBAAMR,UAAU,gBAAhB,UAAgC,mBAAGA,UAAU,WAAb,SAAwB,mBAAGU,KAAMd,KAAKnB,MAAMI,SAAUkB,OAAO,SAArC,SAA+CH,KAAKnB,MAAMC,SAAlH,IAAgI,cAAC,IAAD,CAAiB4B,KAAMK,IAAaH,KAAK,UACzK,uBAAMR,UAAU,gBAAhB,UAAgC,mBAAGA,UAAU,WAAb,SAAyBJ,KAAKnB,MAAMK,WAApE,IAAmF,cAAC,IAAD,CAAiBwB,KAAMM,IAAgBJ,KAAK,kB,wBAMnJ,SAAWK,GACP,MAAY,SAATA,EACQ,mBAAMzB,eAAN,IAEA,mBAAMC,kBAAN,M,oBAGf,WACI,OACKO,KAAKT,WAAWS,KAAKpB,MAAMqC,U,GA1FpBC,IAAMC,WCFpBC,E,4JAGF,WAEI,OACI,sBAAKhB,UAAU,eAAf,UACI,wBAAQiB,QAASrB,KAAKpB,MAAM0C,eAAgBlB,UAAU,4CAAtD,uBACA,wBAAQiB,QAASrB,KAAKpB,MAAM0C,eAAgBlB,UAAU,iCAAtD,iC,GARUc,IAAMC,WAajBC,ICkGAG,E,kDA7GX,WAAY3C,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACV2C,eAAe,EACfC,gBAAiB,IAGpB,EAAKhC,kBAAoB,EAAKA,kBAAkBL,KAAvB,gBACzB,EAAKI,eAAiB,EAAKA,eAAeJ,KAApB,gBACtB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAClB,EAAKoC,cAAgB,EAAKA,cAAcpC,KAAnB,gBACrB,EAAKsC,cAAgB,EAAKA,cAActC,KAAnB,gBACrB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBAbL,E,qDAelB,WACI,OAA+B,GAA5BY,KAAKnB,MAAM2C,eAAuD,IAA9BxB,KAAKnB,MAAM4C,gBAE1C,0BAASrB,UAAU,sBAAnB,UACI,qBAAKA,UAAU,qBAAf,SACI,2CAEJ,qBAAKA,UAAU,iBAAf,SACI,4BAAIJ,KAAKnB,MAAM4C,uBAOtB,K,4BAIb,WASI,OAA+B,GAA5BzB,KAAKnB,MAAM2C,cAEN,0BAASpB,UAAU,sBAAnB,UACI,qBAAKA,UAAU,qBAAf,SACI,6CAEJ,sBAAKA,UAAU,iBAAf,UACI,0BAAUA,UAAU,kBAAoBE,KAAK,OAAOG,YAAY,0BAA0BkB,QAdzF,WACb,IAAIC,EAAUlC,SAASC,cAAc,oBACrCiC,EAAQC,MAAMC,OAAS,MACvBF,EAAQC,MAAMC,OAAUF,EAAQG,aAAc,MAW6EvB,SAAUR,KAAKV,YAAae,MAAOL,KAAKnB,MAAM4C,kBAC7J,sBAAKrB,UAAU,sBAAf,UACI,+CADJ,IAC0B,cAAC,IAAD,CAAiBM,KAAMsB,IAASX,QAASrB,KAAK0B,yBAOhF,0BAAStB,UAAU,sBAAnB,UACI,mBAAGA,UAAU,uBAAb,yBACA,cAAC,IAAD,CAAiBM,KAAMuB,IAAcZ,QAASrB,KAAKwB,qB,2BAMnE,WACKxB,KAAKC,SAAS,CACXuB,eAAe,M,2BAIvB,WAC2F,GAAnFU,OAAOC,QAAQ,kEACfnC,KAAKC,SAAS,CACVuB,eAAe,EACfC,gBAAiB,O,wBAK7B,SAAWR,GACP,MAAY,SAATA,EACQ,mBAAMzB,eAAN,IAEA,mBAAMC,kBAAN,M,yBAIf,SAAYgC,EAAiB1B,GACzBC,KAAKC,SAAL,eACKwB,EAAkB1B,M,yBAI3B,SAAYG,GACRF,KAAKX,YAAYa,EAAEC,OAAOC,UAAWF,EAAEC,OAAOE,S,oBAMlD,WACI,OACIL,KAAKT,WAAWS,KAAKpB,MAAMqC,U,GA1GjBC,IAAMC,W,QCqNbiB,E,kDApNX,WAAYxD,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTwD,cAAc,EACdC,MAAO,CAAC,CACJC,QAAS,GACX,CACEC,UAAW,KAEfC,OAAQ,IAGZ,EAAKhD,kBAAoB,EAAKA,kBAAkBL,KAAvB,gBACzB,EAAKI,eAAiB,EAAKA,eAAeJ,KAApB,gBACtB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAClB,EAAKiD,aAAe,EAAKA,aAAajD,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBACnB,EAAKsD,SAAW,EAAKA,SAAStD,KAAd,gBAChB,EAAKuD,YAAc,EAAKA,YAAYvD,KAAjB,gBACnB,EAAKwD,kBAAoB,EAAKA,kBAAkBxD,KAAvB,gBACzB,EAAKyD,iBAAmB,EAAKA,iBAAiBzD,KAAtB,gBACxB,EAAK0D,YAAc,EAAKA,YAAY1D,KAAjB,gBAtBL,E,qDAwBlB,WACI,OAA8B,GAA3BY,KAAKnB,MAAMwD,aAEN,0BAASjC,UAAU,YAAnB,UACI,qBAAKA,UAAU,qBAAf,SACI,0CAEJ,qBAAKA,UAAU,+BAAf,SACKJ,KAAKnB,MAAM4D,OAAOM,KAAI,SAACC,EAAMC,GAE1B,OACA,qBAAK7C,UAAU,kBAAf,SACI,gCACI,8BAAI4C,EAAK,GAAGT,QAAU,EAAtB,OACA,4BAAIS,EAAK,GAAGR,gBAHoBQ,EAAK,GAAGT,iBAc3D,K,4BAIb,WAAiB,IAAD,OAOZ,OAA8B,GAA3BvC,KAAKnB,MAAMwD,aAEN,0BAASjC,UAAU,WAAnB,UACI,qBAAKA,UAAU,qBAAf,SACI,0CAEJ,sBAAKA,UAAU,+BAAf,UACI,sBAAKA,UAAU,+BAAf,UACKJ,KAAKnB,MAAM4D,OAAOM,KAAI,SAACC,EAAMC,GAAP,OAAe,EAAKH,YAAYE,EAAMC,MAE7D,sBAAK7C,UAAU,uCAAf,UACI,0BAAUA,UAAU,sBAAsBG,KAAK,IAAIoB,QAjB1D,WACb,IAAIC,EAAUlC,SAASC,cAAc,kBACrCiC,EAAQC,MAAMC,OAAS,MACvBF,EAAQC,MAAMC,OAAUF,EAAQG,aAAc,MAc8CvB,SAAUR,KAAKV,YAAamB,YAAY,YAAYJ,MAAOL,KAAKnB,MAAMyD,MAAM,GAAGE,YACvJ,cAAC,IAAD,CAAiB9B,KAAMuB,IAAcZ,QAASrB,KAAK0C,iBAMvD,sBAAKtC,UAAU,oBAAf,UACQ,8CACA,cAAC,IAAD,CAAiBM,KAAMsB,IAASX,QAASrB,KAAK4C,6BASlE,0BAASxC,UAAU,sBAAnB,UACI,mBAAGA,UAAU,uBAAb,wBACA,cAAC,IAAD,CAAiBM,KAAMuB,IAAcZ,QAASrB,KAAKqC,oB,sBAMnE,WACwC,IAAjCrC,KAAKnB,MAAMyD,MAAM,GAAGE,WACnBxC,KAAKC,SAAS,CACVwC,OAAO,GAAD,mBAAMzC,KAAKnB,MAAM4D,QAAjB,CAAyBzC,KAAKnB,MAAMyD,QAC1CA,MAAO,CAAC,CACJC,QAASvC,KAAKnB,MAAM4D,OAAOS,QAC7B,CACEV,UAAW,S,yBAQ3B,SAAYtC,GACR,IAAIiD,EAAYjD,EAAEC,OAAOiD,WAAWA,WAAWC,GAC3CC,EAAYtD,KAAKnB,MAAM4D,OAG3Ba,EAAUC,OAAOJ,EAAW,GAC5BnD,KAAKC,SAAS,CACVwC,OAAQa,IAGZtD,KAAK6C,qB,+BAGT,WACQX,OAAOC,QAAQ,+DACfnC,KAAKC,SAAU,CACXoC,cAAc,EACdC,MAAO,CAAC,CACJC,QAAS,GACX,CACEC,UAAW,KAEfC,OAAQ,O,8BAIpB,WACI,IAAIe,EAAS,EACTF,EAAYtD,KAAKnB,MAAM4D,OACvBgB,EAAc,GAClBzD,KAAKC,SAAS,CACVwC,OAAQ,KAIZa,EAAUP,KAAI,SAAAW,GACKA,EAEN,GAAGnB,QAAUiB,EACtBC,EAAW,sBAAOA,GAAP,CAAoBC,IAG/BF,OAGJxD,KAAKC,SAAS,CACVwC,OAAQgB,M,yBAKhB,SAAYT,EAAMC,GAEV,OACI,sBAAK7C,UAAU,kBAAmBiD,GAAIL,EAAK,GAAGT,QAA9C,UACI,gCACI,8BAAIS,EAAK,GAAGT,QAAU,EAAtB,OACA,4BAAIS,EAAK,GAAGR,eAEhB,cAAC,IAAD,CAAiB9B,KAAMsB,IAASX,QAASrB,KAAK2C,gBALUK,EAAK,GAAGT,W,0BAWhF,WACKvC,KAAKC,SAAS,CACXoC,cAAc,M,yBAGtB,SAAYtC,GAERC,KAAKC,SAAS,CACVqC,MAAO,CAAC,CACJC,QAASvC,KAAKnB,MAAM4D,OAAOS,QAC7B,CACEV,UAAWzC,Q,yBAMvB,SAAYG,GACRF,KAAKX,YAAYa,EAAEC,OAAOE,S,wBAI9B,SAAWY,GACP,MAAY,SAATA,EACQ,mBAAMzB,eAAN,IAEA,mBAAMC,kBAAN,M,oBAGf,WACI,OACIO,KAAKT,WAAWS,KAAKpB,MAAMqC,U,GAjNlBC,IAAMC,W,kDCsSZwC,E,kDAnSX,WAAY/E,GAAO,IAAD,8BACd,cAAMA,IAEDC,MAAQ,CACT+E,iBAAiB,EACjBC,aAAc,GACdC,UAAW,CACPT,GAAI,EACJU,YAAa,GACbC,OAAQ,GACRC,KAAM,GACNC,UAAW,IAAIC,KACfC,QAAS,IAAID,KACbE,SAAU,KAIlB,EAAK5E,kBAAoB,EAAKA,kBAAkBL,KAAvB,gBACzB,EAAKI,eAAiB,EAAKA,eAAeJ,KAApB,gBACtB,EAAKwE,gBAAkB,EAAKA,gBAAgBxE,KAArB,gBACvB,EAAKkF,gBAAkB,EAAKA,gBAAgBlF,KAArB,gBACvB,EAAKmF,cAAgB,EAAKA,cAAcnF,KAAnB,gBACrB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBACnB,EAAKoF,gBAAkB,EAAKA,gBAAgBpF,KAArB,gBACvB,EAAKqF,oBAAsB,EAAKA,oBAAoBrF,KAAzB,gBAC3B,EAAKsF,oBAAsB,EAAKA,oBAAoBtF,KAAzB,gBAC3B,EAAKuF,qBAAuB,EAAKA,qBAAqBvF,KAA1B,gBAC5B,EAAKwF,yBAA2B,EAAKA,yBAAyBxF,KAA9B,gBA3BlB,E,qDA8BlB,WAAoB,IAAD,OACf,OAAiC,GAA9BY,KAAKnB,MAAM+E,gBAEN,0BAASxD,UAAU,wBAAnB,UACI,qBAAKA,UAAU,qBAAf,SACI,6CAEJ,qBAAKA,UAAU,iBAAf,SAEKJ,KAAKnB,MAAMgF,aAAad,KAAI,SAAC8B,EAAe5B,GAAhB,OAAwB,EAAKwB,oBAAoBI,EAAe5B,WAOrG,K,4BAIZ,WAAiB,IAAD,OAMX,OAAiC,GAA9BjD,KAAKnB,MAAM+E,gBAEP,0BAASxD,UAAU,wBAAnB,UACI,qBAAKA,UAAU,qBAAf,SACI,6CAEJ,sBAAKA,UAAU,iBAAf,UAEKJ,KAAKnB,MAAMgF,aAAad,KAAI,SAAC8B,EAAe5B,GAAhB,OAAwB,EAAKwB,oBAAoBI,EAAe5B,MAE7F,sBAAK7C,UAAU,oBAAf,UACI,uBAAOA,UAAU,gBAAjB,8BACA,0BAAUA,UAAU,cAAcG,KAAK,IAAIC,SAAUR,KAAKV,YAAamB,YAAY,kBAAkBJ,MAAOL,KAAKnB,MAAMiF,UAAUC,cACjI,uBAAO3D,UAAU,gBAAjB,oBACA,0BAAUA,UAAU,SAASG,KAAK,IAAIC,SAAUR,KAAKV,YAAamB,YAAY,SAASJ,MAAOL,KAAKnB,MAAMiF,UAAUE,SACnH,uBAAO5D,UAAU,gBAAjB,kBACA,0BAAUA,UAAU,OAAOG,KAAK,IAAIC,SAAUR,KAAKV,YAAcmB,YAAY,OAAOJ,MAAOL,KAAKnB,MAAMiF,UAAUG,OAChH,sBAAK7D,UAAU,0BAAf,UACI,sBAAKA,UAAU,YAAf,UACI,uBAAOA,UAAU,gBAAjB,mBACA,cAAC,IAAD,CACI0E,SAAW9E,KAAKnB,MAAMiF,UAAUI,UAChC1D,SAAWR,KAAKsE,gBAChBS,WAAW,YACXC,qBAAmB,EACnBC,yBAAuB,OAG/B,gCACI,uBAAO7E,UAAU,gBAAjB,oBACA,cAAC,IAAD,CACI0E,SAAW9E,KAAKnB,MAAMiF,UAAUM,QAChC5D,SAAYR,KAAKuE,cACjBQ,WAAW,YACXC,qBAAmB,EACnBC,yBAAuB,UAInC,uBAAO7E,UAAU,gBAAjB,sBACA,0BAAUA,UAAU,WAAWG,KAAK,IAAIoB,QA7C3C,WACb,IAAIC,EAAUlC,SAASC,cAAc,aACrCiC,EAAQC,MAAMC,OAAS,MACvBF,EAAQC,MAAMC,OAAUF,EAAQG,aAAc,MA0C+BvB,SAAUR,KAAKV,YAAcmB,YAAY,WAAWJ,MAAOL,KAAKnB,MAAMiF,UAAUO,WAC7I,uBACA,sBAAKjE,UAAU,YAAf,UACI,8CACA,cAAC,IAAD,CAAiBM,KAAMuB,IAAcZ,QAASrB,KAAKwE,qBAEvD,sBAAKpE,UAAU,oBAAf,UACI,iDACA,cAAC,IAAD,CAAiBM,KAAMsB,IAASX,QAASrB,KAAK2E,mCAQ9D,0BAASvE,UAAU,wBAAnB,UACI,mBAAGA,UAAU,uBAAb,2BACA,cAAC,IAAD,CAAiBM,KAAMuB,IAAcZ,QAASrB,KAAK4D,uB,6BAMnE,WACI5D,KAAKC,SAAS,CACV2D,iBAAiB,M,6BAGzB,SAAgBsB,GACVlF,KAAKC,SAAS,CACZ6D,UAAW,CACPT,GAAIrD,KAAKnB,MAAMiF,UAAUT,GACzBU,YAAa/D,KAAKnB,MAAMiF,UAAUC,YAClCC,OAAQhE,KAAKnB,MAAMiF,UAAUE,OAC7BC,KAAMjE,KAAKnB,MAAMiF,UAAUG,KAC3BC,UAAWgB,EACXd,QAASpE,KAAKnB,MAAMiF,UAAUM,QAC9BC,SAAUrE,KAAKnB,MAAMiF,UAAUO,c,2BAK3C,SAAca,GACTlF,KAAKC,SAAS,CACX6D,UAAW,CACPT,GAAIrD,KAAKnB,MAAMiF,UAAUT,GACzBU,YAAa/D,KAAKnB,MAAMiF,UAAUC,YAClCC,OAAQhE,KAAKnB,MAAMiF,UAAUE,OAC7BC,KAAMjE,KAAKnB,MAAMiF,UAAUG,KAC3BC,UAAWlE,KAAKnB,MAAMiF,UAAUI,UAChCE,QAASc,EACTb,SAAUrE,KAAKnB,MAAMiF,UAAUO,c,wBAK3C,SAAWpD,GACP,MAAY,SAATA,EACQ,mBAAMzB,eAAN,IAEA,mBAAMC,kBAAN,M,yBAIf,SAAY0F,EAAUpF,GAAW,IAAD,OACxBqF,EAAI,eAAOpF,KAAKnB,MAAMiF,WAE1BuB,OAAOC,KAAKF,GAAMrC,KAAK,SAAAwC,GACnBH,EAAK/B,GAAK,EAAKxE,MAAMgF,aAAaX,OAEnB,eAAZiC,EACCC,EAAKrB,YAAchE,EACA,UAAZoF,EACPC,EAAKpB,OAASjE,EACK,QAAZoF,EACPC,EAAKnB,KAAOlE,EACM,YAAZoF,IACNC,EAAKf,SAAWtE,MAGxBC,KAAKC,SAAS,CACV6D,UAAWsB,M,yBAGnB,SAAYlF,GACRF,KAAKX,YAAYa,EAAEC,OAAOC,UAAWF,EAAEC,OAAOE,S,6BAElD,WACI,IAAMyD,EAAY9D,KAAKnB,MAAMiF,UACD,IAAzBA,EAAUC,aAAyC,IAApBD,EAAUE,QAAkC,IAAlBF,EAAUG,KAClEjE,KAAKC,SAAS,CACV4D,aAAa,GAAD,mBAAM7D,KAAKnB,MAAMgF,cAAjB,CAA+BC,IAC3CA,UAAW,CACPT,GAAIrD,KAAKnB,MAAMgF,aAAaX,OAC5Ba,YAAa,GACbC,OAAQ,GACRC,KAAM,GACNC,UAAW,IAAIC,KACfC,QAAS,IAAID,KACbE,SAAU,MAIlBmB,MAAM,sF,iCAGd,SAAoBC,EAAMxC,GACtB,IAAIvC,EAWJ,OARIA,EADkB,QAAnBV,KAAKpB,MAAMqC,KACF,sBAAKb,UAAU,oBAAf,UACI,sDACA,cAAC,IAAD,CAAiBM,KAAMsB,IAASX,QAASrB,KAAK0E,yBAGnD,GAIP,sBAAKtE,UAAU,gBAAgBiD,GAAIoC,EAAKpC,GAAxC,UACI,6BAAKoC,EAAK1B,cACV,4BAAG,4BAAI0B,EAAKzB,WACZ,4BAAIyB,EAAKxB,OACT,8BAAIyB,IAAOD,EAAKvB,WAAWyB,OAAO,aAAlC,MAAmDD,IAAOD,EAAKrB,SAASuB,OAAO,gBAC/E,4BAAIF,EAAKpB,WACR3D,IAN4C+E,EAAKpC,M,iCAW9D,SAAoBnD,GAChB,IAAIiD,EAAYjD,EAAEC,OAAOiD,WAAWA,WAAWA,WAAWC,GACtDuC,EAAoB5F,KAAKnB,MAAMgF,aAGnC+B,EAAkBrC,OAAOJ,EAAW,GACnCnD,KAAKC,SAAS,CACX4D,aAAc+B,IAMlB5F,KAAK4E,6B,kCAGT,WACQ1C,OAAOC,QAAQ,mEACfnC,KAAKC,SAAS,CACV2D,iBAAiB,EACjBC,aAAc,GACdC,UAAW,CACPT,GAAI,EACJU,YAAa,GACbC,OAAQ,GACRC,KAAM,GACNC,UAAW,IAAIC,KACfC,QAAS,IAAID,KACbE,SAAU,Q,sCAM1B,WACI,IAAIb,EAAS,EACToC,EAAoB5F,KAAKnB,MAAMgF,aAC/BgC,EAAsB,GAE1B7F,KAAKC,SAAS,CACV4D,aAAc,KAIlB+B,EAAkB7C,KAAI,SAAA+C,GACJA,EACNzC,GAAKG,EACbqC,EAAmB,sBAAOA,GAAP,CAA4BC,IAE/CtC,OAGJxD,KAAKC,SAAS,CACV4D,aAAcgC,M,oBAKtB,WACI,OACI7F,KAAKT,WAAWS,KAAKpB,MAAMqC,U,GAhSfC,IAAMC,WCmSf4E,E,kDAlSX,WAAYnH,GAAO,IAAD,8BACd,cAAMA,IAEDC,MAAQ,CACTmH,kBAAkB,EAClBC,cAAe,GACfC,WAAY,CACR7C,GAAI,EACJ8C,QAAS,GACTC,SAAU,GACVnC,KAAM,GACNC,UAAW,IAAIC,KACfC,QAAS,IAAID,KACbE,SAAU,KAIlB,EAAK5E,kBAAoB,EAAKA,kBAAkBL,KAAvB,gBACzB,EAAKI,eAAiB,EAAKA,eAAeJ,KAApB,gBACtB,EAAK4G,iBAAmB,EAAKA,iBAAiB5G,KAAtB,gBACxB,EAAKkF,gBAAkB,EAAKA,gBAAgBlF,KAArB,gBACvB,EAAKmF,cAAgB,EAAKA,cAAcnF,KAAnB,gBACrB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBACnB,EAAKiH,iBAAmB,EAAKA,iBAAiBjH,KAAtB,gBACxB,EAAKkH,qBAAuB,EAAKA,qBAAqBlH,KAA1B,gBAC5B,EAAKmH,qBAAuB,EAAKA,qBAAqBnH,KAA1B,gBAC5B,EAAKoH,sBAAwB,EAAKA,sBAAsBpH,KAA3B,gBAC7B,EAAKqH,0BAA4B,EAAKA,0BAA0BrH,KAA/B,gBA3BnB,E,qDA8BlB,WAAoB,IAAD,OACf,OAAkC,GAA/BY,KAAKnB,MAAMmH,iBAEN,0BAAS5F,UAAU,yBAAnB,UACI,qBAAKA,UAAU,qBAAf,SACI,8CAEJ,qBAAKA,UAAU,iBAAf,SAEKJ,KAAKnB,MAAMoH,cAAclD,KAAI,SAAC2D,EAAgBzD,GAAjB,OAAyB,EAAKqD,qBAAqBI,EAAgBzD,WAOzG,K,4BAIZ,WAAiB,IAAD,OAMX,OAAkC,GAA/BjD,KAAKnB,MAAMmH,iBAEP,0BAAS5F,UAAU,yBAAnB,UACI,qBAAKA,UAAU,qBAAf,SACI,8CAEJ,sBAAKA,UAAU,iBAAf,UAEKJ,KAAKnB,MAAMoH,cAAclD,KAAI,SAAC2D,EAAgBzD,GAAjB,OAAyB,EAAKqD,qBAAqBI,EAAgBzD,MAEjG,sBAAK7C,UAAU,qBAAf,UACI,uBAAOA,UAAU,gBAAjB,2BACA,0BAAUA,UAAU,UAAUG,KAAK,IAAIC,SAAUR,KAAKV,YAAamB,YAAY,cAAcJ,MAAOL,KAAKnB,MAAMqH,WAAWC,UAC1H,uBAAO/F,UAAU,gBAAjB,wBACA,0BAAUA,UAAU,WAAWG,KAAK,IAAIC,SAAUR,KAAKV,YAAamB,YAAY,YAAYJ,MAAOL,KAAKnB,MAAMqH,WAAWE,WACzH,uBAAOhG,UAAU,gBAAjB,kBACA,0BAAUA,UAAU,OAAOG,KAAK,IAAIC,SAAUR,KAAKV,YAAcmB,YAAY,OAAOJ,MAAOL,KAAKnB,MAAMqH,WAAWjC,OACjH,sBAAK7D,UAAU,2BAAf,UACI,sBAAKA,UAAU,YAAf,UACI,uBAAOA,UAAU,gBAAjB,mBACA,cAAC,IAAD,CACI0E,SAAW9E,KAAKnB,MAAMqH,WAAWhC,UACjC1D,SAAWR,KAAKsE,gBAChBS,WAAW,YACXC,qBAAmB,EACnBC,yBAAuB,OAG/B,gCACI,uBAAO7E,UAAU,gBAAjB,oBACA,cAAC,IAAD,CACI0E,SAAW9E,KAAKnB,MAAMqH,WAAW9B,QACjC5D,SAAYR,KAAKuE,cACjBQ,WAAW,YACXC,qBAAmB,EACnBC,yBAAuB,UAInC,uBAAO7E,UAAU,gBAAjB,sBACA,0BAAUA,UAAU,WAAWG,KAAK,IAAIoB,QA7C3C,WACb,IAAIC,EAAUlC,SAASC,cAAc,aACrCiC,EAAQC,MAAMC,OAAS,MACvBF,EAAQC,MAAMC,OAAUF,EAAQG,aAAc,MA0C+BvB,SAAUR,KAAKV,YAAcmB,YAAY,WAAWJ,MAAOL,KAAKnB,MAAMqH,WAAW7B,WAC9I,uBACA,sBAAKjE,UAAU,YAAf,UACI,+CACA,cAAC,IAAD,CAAiBM,KAAMuB,IAAcZ,QAASrB,KAAKqG,sBAEvD,sBAAKjG,UAAU,oBAAf,UACI,kDACA,cAAC,IAAD,CAAiBM,KAAMsB,IAASX,QAASrB,KAAKwG,oCAQ9D,0BAASpG,UAAU,yBAAnB,UACI,mBAAGA,UAAU,uBAAb,4BACA,cAAC,IAAD,CAAiBM,KAAMuB,IAAcZ,QAASrB,KAAKgG,wB,8BAMnE,WACIhG,KAAKC,SAAS,CACV+F,kBAAkB,M,6BAG1B,SAAgBd,GACVlF,KAAKC,SAAS,CACZiG,WAAY,CACR7C,GAAIrD,KAAKnB,MAAMqH,WAAW7C,GAC1B8C,QAASnG,KAAKnB,MAAMqH,WAAWC,QAC/BC,SAAUpG,KAAKnB,MAAMqH,WAAWE,SAChCnC,KAAMjE,KAAKnB,MAAMqH,WAAWjC,KAC5BC,UAAWgB,EACXd,QAASpE,KAAKnB,MAAMqH,WAAW9B,QAC/BC,SAAUrE,KAAKnB,MAAMqH,WAAW7B,c,2BAK5C,SAAca,GACTlF,KAAKC,SAAS,CACXiG,WAAY,CACR7C,GAAIrD,KAAKnB,MAAMqH,WAAW7C,GAC1B8C,QAASnG,KAAKnB,MAAMqH,WAAWC,QAC/BC,SAAUpG,KAAKnB,MAAMqH,WAAWE,SAChCnC,KAAMjE,KAAKnB,MAAMqH,WAAWjC,KAC5BC,UAAWlE,KAAKnB,MAAMqH,WAAWhC,UACjCE,QAASc,EACTb,SAAUrE,KAAKnB,MAAMqH,WAAW7B,c,wBAK5C,SAAWpD,GACP,MAAY,SAATA,EACQ,mBAAMzB,eAAN,IAEA,mBAAMC,kBAAN,M,yBAIf,SAAY0F,EAAUpF,GAAW,IAAD,OACxBqF,EAAI,eAAOpF,KAAKnB,MAAMqH,YAE1Bb,OAAOC,KAAKF,GAAMrC,KAAK,SAAAwC,GACnBH,EAAK/B,GAAK,EAAKxE,MAAMoH,cAAc/C,OAEpB,WAAZiC,EACCC,EAAKe,QAAUpG,EACI,YAAZoF,EACPC,EAAKgB,SAAWrG,EACG,QAAZoF,EACPC,EAAKnB,KAAOlE,EACM,YAAZoF,IACNC,EAAKf,SAAWtE,MAGxBC,KAAKC,SAAS,CACViG,WAAYd,M,yBAGpB,SAAYlF,GACRF,KAAKX,YAAYa,EAAEC,OAAOC,UAAWF,EAAEC,OAAOE,S,8BAElD,WACI,IAAM6F,EAAalG,KAAKnB,MAAMqH,WACL,IAAtBA,EAAWC,SAAwC,IAAvBD,EAAWE,UAAqC,IAAnBF,EAAWjC,KACnEjE,KAAKC,SAAS,CACVgG,cAAc,GAAD,mBAAMjG,KAAKnB,MAAMoH,eAAjB,CAAgCC,IAC7CA,WAAY,CACR7C,GAAIrD,KAAKnB,MAAMoH,cAAc/C,OAC7BiD,QAAS,GACTC,SAAU,GACVnC,KAAM,GACNC,UAAW,IAAIC,KACfC,QAAS,IAAID,KACbE,SAAU,MAIlBmB,MAAM,0D,kCAGd,SAAqBC,EAAMxC,GACvB,IAAIvC,EAWJ,OARIA,EADkB,QAAnBV,KAAKpB,MAAMqC,KACF,sBAAKb,UAAU,oBAAf,UACI,uDACA,cAAC,IAAD,CAAiBM,KAAMsB,IAASX,QAASrB,KAAKuG,0BAGnD,GAIP,sBAAKnG,UAAU,iBAAiBiD,GAAIoC,EAAKpC,GAAzC,UACI,6BAAKoC,EAAKU,UACV,4BAAG,4BAAIV,EAAKW,aACZ,4BAAIX,EAAKxB,OACT,8BAAIyB,IAAOD,EAAKvB,WAAWyB,OAAO,aAAlC,MAAmDD,IAAOD,EAAKrB,SAASuB,OAAO,gBAC/E,4BAAIF,EAAKpB,WACR3D,IAN6C+E,EAAKpC,M,kCAW/D,SAAqBnD,GACjB,IAAIiD,EAAYjD,EAAEC,OAAOiD,WAAWA,WAAWA,WAAWC,GACtDsD,EAAqB3G,KAAKnB,MAAMoH,cAGpCU,EAAmBpD,OAAOJ,EAAW,GACpCnD,KAAKC,SAAS,CACXgG,cAAeU,IAMnB3G,KAAKyG,8B,mCAGT,WACQvE,OAAOC,QAAQ,oEACfnC,KAAKC,SAAS,CACV+F,kBAAkB,EAClBC,cAAe,GACfC,WAAY,CACR7C,GAAI,EACJ8C,QAAS,GACTC,SAAU,GACVnC,KAAM,GACNC,UAAW,IAAIC,KACfC,QAAS,IAAID,KACbE,SAAU,Q,uCAK1B,WACI,IAAIb,EAAS,EACTmD,EAAqB3G,KAAKnB,MAAMoH,cAChCW,EAAuB,GAE3B5G,KAAKC,SAAS,CACVgG,cAAe,KAInBU,EAAmB5D,KAAI,SAAA+C,GACLA,EACNzC,GAAKG,EACboD,EAAoB,sBAAOA,GAAP,CAA6Bd,IAEjDtC,OAGJxD,KAAKC,SAAS,CACVgG,cAAeW,M,oBAKvB,WACI,OACI5G,KAAKT,WAAWS,KAAKpB,MAAMqC,U,GA/RdC,IAAMC,WCoOhB0F,E,kDAnOX,WAAYjI,GAAO,IAAD,8BACd,cAAMA,IAEDC,MAAQ,CACTiI,cAAc,EACdC,UAAW,GACXC,cAAe,CACXC,kBAAmB,GACnB5D,GAAI,EACJ6D,MAAO,GACPC,YAAa,KAIrB,EAAK1H,kBAAoB,EAAKA,kBAAkBL,KAAvB,gBACzB,EAAKI,eAAiB,EAAKA,eAAeJ,KAApB,gBACtB,EAAK0H,aAAe,EAAKA,aAAa1H,KAAlB,gBAEpB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBACnB,EAAKgI,aAAe,EAAKA,aAAahI,KAAlB,gBACpB,EAAKiI,iBAAmB,EAAKA,iBAAiBjI,KAAtB,gBACxB,EAAKmH,qBAAuB,EAAKA,qBAAqBnH,KAA1B,gBAC5B,EAAKkI,kBAAoB,EAAKA,kBAAkBlI,KAAvB,gBACzB,EAAKqH,0BAA4B,EAAKA,0BAA0BrH,KAA/B,gBAvBnB,E,qDA0BlB,WAAoB,IAAD,OACf,OAA8B,GAA3BY,KAAKnB,MAAMiI,aAEN,0BAAS1G,UAAU,yBAAnB,UACI,qBAAKA,UAAU,uCAAf,SACI,6BAAKJ,KAAKnB,MAAMmI,cAAcC,sBAElC,qBAAK7G,UAAU,iBAAf,SAEKJ,KAAKnB,MAAMkI,UAAUhE,KAAI,SAAC2D,EAAgBzD,GAAjB,OAAyB,EAAKoE,iBAAiBX,EAAgBzD,WAOjG,K,4BAIZ,WAAiB,IAAD,OAMX,OAA8B,GAA3BjD,KAAKnB,MAAMiI,aAEP,0BAAS1G,UAAU,qBAAnB,UACI,qBAAKA,UAAU,uCAAf,SACI,0BAAUA,UAAU,oBAAoBG,KAAK,IAAIC,SAAUR,KAAKV,YAAamB,YAAY,gBAAgBJ,MAAOL,KAAKnB,MAAMmI,cAAcC,sBAE7I,sBAAK7G,UAAU,iBAAf,UAEKJ,KAAKnB,MAAMkI,UAAUhE,KAAI,SAAC2D,EAAgBzD,GAAjB,OAAyB,EAAKoE,iBAAiBX,EAAgBzD,MAEzF,sBAAK7C,UAAU,qBAAf,UACI,uBAAOA,UAAU,gBAAjB,gCACA,0BAAUA,UAAU,QAAQG,KAAK,IAAIC,SAAUR,KAAKV,YAAamB,YAAY,QAAQJ,MAAOL,KAAKnB,MAAMmI,cAAcE,QACrH,uBAAO9G,UAAU,gBAAjB,sCACA,0BAAUA,UAAU,cAAcG,KAAK,IAAIoB,QAnB9C,WACb,IAAIC,EAAUlC,SAASC,cAAc,gBACrCiC,EAAQC,MAAMC,OAAS,MACvBF,EAAQC,MAAMC,OAAUF,EAAQG,aAAc,MAgBiCvB,SAAUR,KAAKV,YAAamB,YAAY,cAAcJ,MAAOL,KAAKnB,MAAMmI,cAAcG,cAErJ,sBAAK/G,UAAU,YAAf,UACI,+CACA,cAAC,IAAD,CAAiBM,KAAMuB,IAAcZ,QAASrB,KAAKoH,kBAGvD,sBAAKhH,UAAU,oBAAf,UACI,8CACA,cAAC,IAAD,CAAiBM,KAAMsB,IAASX,QAASrB,KAAKsH,gCAQ9D,0BAASlH,UAAU,yBAAnB,UACI,mBAAGA,UAAU,uBAAb,gCACA,cAAC,IAAD,CAAiBM,KAAMuB,IAAcZ,QAASrB,KAAK8G,oB,0BAMnE,WACI9G,KAAKC,SAAS,CACV6G,cAAc,M,wBAItB,SAAW7F,GACP,MAAY,SAATA,EACQ,mBAAMzB,eAAN,IAEA,mBAAMC,kBAAN,M,yBAIf,SAAY0F,EAAUpF,GAAW,IAAD,OACxBqF,EAAI,eAAOpF,KAAKnB,MAAMmI,eAE1B3B,OAAOC,KAAKF,GAAMrC,KAAK,SAAAwC,GACnBH,EAAK/B,GAAK,EAAKxE,MAAMkI,UAAU7D,OAEhB,SAAZiC,EACCC,EAAK8B,MAAQnH,EACM,eAAZoF,EACPC,EAAK+B,YAAcpH,EACA,qBAAZoF,IACPC,EAAK6B,kBAAoBlH,MAGjCC,KAAKC,SAAS,CACV+G,cAAe5B,M,yBAIvB,SAAYlF,GACRF,KAAKX,YAAYa,EAAEC,OAAOC,UAAWF,EAAEC,OAAOE,S,0BAElD,WACI,IAAM2G,EAAgBhH,KAAKnB,MAAMmI,cAEP,IAAvBA,EAAcE,OAA4C,IAA7BF,EAAcG,YAC1CnH,KAAKC,SAAS,CACV8G,UAAU,GAAD,mBAAM/G,KAAKnB,MAAMkI,WAAjB,CAA4BC,IACrCA,cAAe,CACXC,kBAAmBjH,KAAKnB,MAAMmI,cAAcC,kBAC5C5D,GAAIrD,KAAKnB,MAAMkI,UAAU7D,OACzBgE,MAAO,GACPC,YAAa,MAKrB3B,MAAM,kE,8BAGd,SAAiBC,EAAMxC,GACnB,IAAIvC,EAWJ,OARIA,EADkB,QAAnBV,KAAKpB,MAAMqC,KACF,sBAAKb,UAAU,oBAAf,UACI,qDACA,cAAC,IAAD,CAAiBM,KAAMsB,IAASX,QAASrB,KAAKuG,0BAGnD,GAIP,sBAAKnG,UAAU,eAAeiD,GAAIoC,EAAKpC,GAAvC,UACI,6BAAKoC,EAAKyB,QACV,8BAAIzB,EAAK0B,YAAT,OAECzG,IAJ2C+E,EAAKpC,M,kCAS7D,SAAqBnD,GACjB,IAAIiD,EAAYjD,EAAEC,OAAOiD,WAAWA,WAAWA,WAAWC,GACtDkE,EAAiBvH,KAAKnB,MAAMkI,UAGhCQ,EAAehE,OAAOJ,EAAW,GAChCnD,KAAKC,SAAS,CACX8G,UAAWQ,IAMfvH,KAAKyG,8B,+BAGT,WACQvE,OAAOC,QAAQ,4DACfnC,KAAKC,SAAS,CACV6G,cAAc,EACdC,UAAW,GACXC,cAAe,CACXC,kBAAmB,GACnB5D,GAAI,EACJ6D,MAAO,GACPC,YAAa,Q,uCAK7B,WACI,IAAI3D,EAAS,EACTmD,EAAqB3G,KAAKnB,MAAMkI,UAChCH,EAAuB,GAE3B5G,KAAKC,SAAS,CACV8G,UAAW,KAIfJ,EAAmB5D,KAAI,SAAA+C,GACLA,EACNzC,GAAKG,EACboD,EAAoB,sBAAOA,GAAP,CAA6Bd,IAEjDtC,OAGJxD,KAAKC,SAAS,CACV8G,UAAWH,M,oBAKnB,WACI,OACI5G,KAAKT,WAAWS,KAAKpB,MAAMqC,U,GAhOlBC,IAAMC,WC+DZqG,E,kDA5Db,WAAY5I,GAAO,IAAD,8BACd,cAAMA,IAEDC,MAAQ,CACX4I,YAAa,QAIf,EAAKtI,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKsI,kBAAoB,EAAKA,kBAAkBtI,KAAvB,gBATX,E,qDAgBlB,SAAkBc,GACAyH,MAAMC,KAAKlI,SAASmI,iBAAiB,sBAC3C9E,KAAK,SAAA+E,GACTA,EAAOlI,UAAUmI,OAAO,oBAE5B7H,EAAEC,OAAOP,UAAUoI,IAAI,iBACvBhI,KAAKb,mB,4BAGT,WACmBO,SAASC,cAAc,eAE1BC,UAAUC,SAAS,iBAC7BG,KAAKC,SAAS,CACZwH,YAAa,SAGfzH,KAAKC,SAAS,CACZwH,YAAa,c,oBAMrB,WAEI,OACI,sBAAKrH,UAAU,MAAf,UACE,cAAC,EAAD,CAAakB,eAAgBtB,KAAK0H,kBAAmBrG,QAASrB,KAAKb,iBACnE,yBAAQiB,UAAU,aAAlB,UACE,cAAC,EAAD,CAAQa,KAAMjB,KAAKnB,MAAM4I,cACzB,cAAC,EAAD,CAASxG,KAAMjB,KAAKnB,MAAM4I,cAC1B,cAAC,EAAD,CAAQxG,KAAMjB,KAAKnB,MAAM4I,cACzB,cAAC,EAAD,CAAWxG,KAAMjB,KAAKnB,MAAM4I,cAC5B,cAAC,EAAD,CAAYxG,KAAMjB,KAAKnB,MAAM4I,cAC7B,cAAC,EAAD,CAAQxG,KAAMjB,KAAKnB,MAAM4I,wB,GApDrBvG,IAAMC,WCJxB8G,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzI,SAAS0I,eAAe,U","file":"static/js/main.68e3c3c3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPhone } from '@fortawesome/free-solid-svg-icons'\r\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons'\r\nimport { faLinkedin } from '@fortawesome/free-brands-svg-icons'\r\n\r\nclass Intro extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            name: \"\",\r\n            contactPhone: \"\",\r\n            email: \"\",\r\n            linkedin: \"\",\r\n            location: \"\"\r\n        };\r\n\r\n        this.getCurrentMode = this.getCurrentMode.bind(this)\r\n        this.updateState = this.updateState.bind(this);\r\n        this.updateField = this.updateField.bind(this);\r\n        this.renderMode = this.renderMode.bind(this);\r\n        this.renderEditMode = this.renderEditMode.bind(this);\r\n        this.renderPreviewMode = this.renderPreviewMode.bind(this);\r\n    }\r\n\r\n    getCurrentMode(){\r\n    \r\n        let editButton = document.querySelector(\".editButton\");\r\n    \r\n        if(editButton.classList.contains(\"button-active\")){\r\n            return 'edit' //we return true as the \"edit mode\" button is selected\r\n            \r\n        } else {\r\n            return 'preview'\r\n        }\r\n    }\r\n\r\n    updateState(currentState, newValue) {\r\n        this.setState({\r\n            [currentState]: newValue\r\n        })\r\n    }\r\n\r\n    updateField(e) {\r\n        this.updateState(e.target.className, e.target.value);\r\n        // console.log(e.target.className)\r\n        // console.log(this.state)\r\n         \r\n    }\r\n    renderEditMode() {\r\n        return (\r\n            <section className=\"cvHeader\">\r\n            \r\n                    <div className=\"name\">\r\n                        \r\n                        <textarea className=\"name\" type=\"text\" rows=\"3\" onChange={this.updateField} value={this.state.name} placeholder=\"name\" />\r\n                    </div>\r\n                    <div className=\"generalInformation\">\r\n                        <label className=\"textareaLabel\">Contact phone</label>\r\n                        <textarea className=\"contactPhone\" onChange={this.updateField} type=\"text\" rows=\"1\"   value={this.state.contactPhone} placeholder=\"phone\" />\r\n                        <label className=\"textareaLabel\">E-mail address</label>\r\n                        <textarea className=\"email\" type=\"email\" rows=\"1\"  onChange={this.updateField} value={this.state.email}  placeholder=\"email\" />\r\n                        <label className=\"textareaLabel\">LinkedIn(paste profile hyperlink)</label>\r\n                        <textarea className=\"linkedin\" type=\"text\" rows=\"1\" onChange={this.updateField} value={this.state.linkedin} placeholder=\"linkedin hyperlink\" />\r\n                        <label className=\"textareaLabel\">Your current location</label>\r\n                        <textarea className=\"location\" type=\"text\" rows=\"1\" onChange={this.updateField} value={this.state.location}  placeholder=\"location\" />\r\n                    </div>\r\n                 \r\n            </section>\r\n        )\r\n    }\r\n    renderPreviewMode() {\r\n        return (\r\n            <section className=\"cvHeader\">\r\n                    <div className=\"name\">\r\n                        <h1 className=\"name\"> {this.state.name}</h1>\r\n                    </div>\r\n                    <div className=\"generalInformation\">\r\n                        <span className=\"alignHeadIcon\"><p className=\"contactPhone\">{this.state.contactPhone}</p><FontAwesomeIcon icon={faPhone} size=\"xs\"/></span>\r\n                        <span className=\"alignHeadIcon\"><p className=\"email\">{this.state.email}</p> <FontAwesomeIcon icon={faEnvelope} size=\"xs\"/></span>\r\n                        <span className=\"alignHeadIcon\"><p className=\"linkedin\"><a href={this.state.linkedin} target=\"_blank\">{this.state.name}</a></p> <FontAwesomeIcon icon={faLinkedin } size=\"xs\"/></span>\r\n                        <span className=\"alignHeadIcon\"><p className=\"location\">{this.state.location }</p> <FontAwesomeIcon icon={faMapMarkerAlt} size=\"xs\"/></span>\r\n                    </div>\r\n                 \r\n            </section>\r\n        )\r\n    }\r\n    renderMode(mode) {\r\n        if(mode === 'edit') {\r\n            return <this.renderEditMode />\r\n        } else {\r\n            return <this.renderPreviewMode />\r\n        }\r\n    }\r\n    render(){\r\n        return (\r\n             this.renderMode(this.props.mode)\r\n            \r\n        )\r\n    }\r\n}\r\nexport default Intro","import React from 'react';\r\n\r\n\r\n\r\n\r\nclass ModeButtons extends React.Component {\r\n  \r\n    \r\n    render(){\r\n         \r\n        return (\r\n            <div className=\"viewing-mode\">\r\n                <button onClick={this.props.toggleFunction} className=\"editButton changeModeButton button-active\">Edit mode</button>\r\n                <button onClick={this.props.toggleFunction} className=\"previewButton changeModeButton\">Preview mode</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default ModeButtons","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPhone } from '@fortawesome/free-solid-svg-icons'\r\nimport { faPlusSquare } from '@fortawesome/free-solid-svg-icons'\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass Summary extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n           enableSummary: false,\r\n           summaryTextarea: ''\r\n        };\r\n\r\n        this.renderPreviewMode = this.renderPreviewMode.bind(this)\r\n        this.renderEditMode = this.renderEditMode.bind(this)\r\n        this.renderMode = this.renderMode.bind(this)\r\n        this.enableSummary = this.enableSummary.bind(this)\r\n        this.deleteSummary = this.deleteSummary.bind(this)\r\n        this.updateState = this.updateState.bind(this)\r\n        this.updateField = this.updateField.bind(this)\r\n    }\r\n    renderPreviewMode(){\r\n        if(this.state.enableSummary == true && this.state.summaryTextarea != '') {\r\n            return (\r\n                <section className=\"cvSummary alignIcon\">\r\n                    <div className=\"sectionDescription\">\r\n                        <h5>Summary</h5>\r\n                    </div>\r\n                    <div className=\"sectionContent\">\r\n                        <p>{this.state.summaryTextarea}</p>\r\n                    </div>\r\n                </section>\r\n            )\r\n        } else {\r\n            \r\n            return (\r\n                 ''\r\n            )\r\n        } \r\n    }\r\n    renderEditMode(){\r\n        //we use this function to auto adjust the vertical height of the textarea\r\n        let autoHeight = function() {\r\n            let element = document.querySelector('.summaryTextarea');\r\n            element.style.height = \"5px\";\r\n            element.style.height = (element.scrollHeight)+\"px\";\r\n\r\n        }\r\n\r\n        if(this.state.enableSummary == true) {\r\n            return (\r\n                <section className=\"cvSummary alignIcon\">\r\n                    <div className=\"sectionDescription\">\r\n                        <h5>Education</h5>\r\n                    </div>\r\n                    <div className=\"sectionContent\">\r\n                        <textarea className=\"summaryTextarea\"   type=\"text\" placeholder=\"Tell me about yourself!\" onInput={autoHeight} onChange={this.updateField} value={this.state.summaryTextarea} />\r\n                        <div className=\"deleteItemWrapper  \">\r\n                            <p>Delete summary</p> <FontAwesomeIcon icon={faTrash} onClick={this.deleteSummary}/>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            )\r\n        } else {\r\n            return (\r\n                <section className=\"cvSummary alignIcon\">\r\n                    <p className=\"descriptionParagraph\">Add summary</p>\r\n                    <FontAwesomeIcon icon={faPlusSquare} onClick={this.enableSummary}/>\r\n                </section>\r\n            )\r\n        } \r\n        \r\n    }\r\n    enableSummary(){\r\n         this.setState({\r\n            enableSummary: true\r\n        })\r\n    }\r\n\r\n    deleteSummary(){\r\n        if( window.confirm(\"Are you sure you want to delete your summary and its content?\") == true){\r\n            this.setState({\r\n                enableSummary: false,\r\n                summaryTextarea: ''\r\n            })\r\n        }\r\n        \r\n    }\r\n    renderMode(mode) {\r\n        if(mode === 'edit') {\r\n            return <this.renderEditMode />\r\n        } else {\r\n            return <this.renderPreviewMode />\r\n        }\r\n    }\r\n\r\n    updateState(summaryTextarea, newValue) {\r\n        this.setState({\r\n            [summaryTextarea]: newValue\r\n        })\r\n    }\r\n\r\n    updateField(e) {\r\n        this.updateState(e.target.className, e.target.value);\r\n        // console.log(e.target.className)\r\n        // console.log(this.state)\r\n         \r\n    }\r\n\r\n    render(){\r\n        return (\r\n            this.renderMode(this.props.mode)        \r\n        )\r\n    }\r\n}\r\nexport default Summary","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPhone } from '@fortawesome/free-solid-svg-icons'\r\nimport { faPlusSquare } from '@fortawesome/free-solid-svg-icons'\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass Skills extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            enableSkills: false,\r\n            skill: [{\r\n                skillId: 0,\r\n            },{\r\n                skillText: ''\r\n            }],\r\n            skills: []\r\n        };\r\n \r\n        this.renderPreviewMode = this.renderPreviewMode.bind(this)\r\n        this.renderEditMode = this.renderEditMode.bind(this)\r\n        this.renderMode = this.renderMode.bind(this)\r\n        this.enableSkills = this.enableSkills.bind(this)\r\n        this.updateState = this.updateState.bind(this)\r\n        this.updateField = this.updateField.bind(this)\r\n        this.addSkill = this.addSkill.bind(this)\r\n        this.deleteSkill = this.deleteSkill.bind(this)\r\n        this.deleteSkillsState = this.deleteSkillsState.bind(this)\r\n        this.swiftSkillNumber = this.swiftSkillNumber.bind(this)\r\n        this.renderSkill = this.renderSkill.bind(this)\r\n    }\r\n    renderPreviewMode(){\r\n        if(this.state.enableSkills == true) {\r\n            return (\r\n                <section className=\"cvSummary\">\r\n                    <div className=\"sectionDescription\">\r\n                        <h5>Skills</h5>\r\n                    </div>\r\n                    <div className=\"sectionContent skillsWrapper\">\r\n                        {this.state.skills.map((task, key) => {\r\n                           \r\n                            return (\r\n                            <div className=\"alignIcon skill\"   key={task[0].skillId}>\r\n                                <div>\r\n                                    <p>{task[0].skillId + 1}.</p>\r\n                                    <p>{task[1].skillText}</p>\r\n                                </div>\r\n                            </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </section>\r\n            )\r\n        } else {\r\n            \r\n            return (\r\n                 ''\r\n            )\r\n        } \r\n    }\r\n    renderEditMode(){\r\n        let autoHeight = function() {\r\n            let element = document.querySelector('.skillTextarea');\r\n            element.style.height = \"5px\";\r\n            element.style.height = (element.scrollHeight)+\"px\";\r\n\r\n        }\r\n        if(this.state.enableSkills == true) {\r\n            return (\r\n                <section className=\"cvSkills\">\r\n                    <div className=\"sectionDescription\">\r\n                        <h5>Skills</h5>\r\n                    </div>\r\n                    <div className=\"sectionContent skillsWrapper\">\r\n                        <div className=\"sectionContent skillsWrapper\">\r\n                            {this.state.skills.map((task, key) => this.renderSkill(task, key) )} \r\n\r\n                            <div className=\"alignIcon alignIconCvTextarea skill \">\r\n                                <textarea className=\"skill skillTextarea\" rows=\"2\" onInput={autoHeight} onChange={this.updateField} placeholder=\"Add skill\" value={this.state.skill[1].skillText}/>\r\n                                <FontAwesomeIcon icon={faPlusSquare} onClick={this.addSkill}/>\r\n                                \r\n                            </div>\r\n                            </div>\r\n                            \r\n                             \r\n                            <div className=\"deleteItemWrapper\"> \r\n                                    <p>Delete skills</p>\r\n                                    <FontAwesomeIcon icon={faTrash} onClick={this.deleteSkillsState}/>\r\n                            </div>\r\n                    </div>\r\n\r\n                     \r\n                </section>\r\n            )\r\n        } else {\r\n            return (\r\n                <section className=\"cvSummary alignIcon\">\r\n                    <p className=\"descriptionParagraph\">Add skills</p>\r\n                    <FontAwesomeIcon icon={faPlusSquare} onClick={this.enableSkills}/>\r\n                </section>\r\n            )\r\n        } \r\n        \r\n    }\r\n    addSkill() {\r\n        if(this.state.skill[1].skillText != \"\") {\r\n            this.setState({\r\n                skills: [...this.state.skills, this.state.skill], \r\n                skill: [{\r\n                    skillId: this.state.skills.length\r\n                },{\r\n                    skillText: ''\r\n                }],\r\n             })\r\n        }\r\n         \r\n\r\n          \r\n    }\r\n    deleteSkill(e) {\r\n        let elementId = e.target.parentNode.parentNode.id;\r\n        let newSkills = this.state.skills;\r\n\r\n        \r\n        newSkills.splice(elementId, 1)\r\n        this.setState({\r\n            skills: newSkills\r\n        })\r\n        \r\n        this.swiftSkillNumber()\r\n\r\n    }\r\n    deleteSkillsState() {\r\n        if( window.confirm(\"Are you sure you want to delete all skill items submitted?\") ){\r\n            this.setState ({\r\n                enableSkills: false ,\r\n                skill: [{\r\n                    skillId: 0,\r\n                },{\r\n                    skillText: ''\r\n                }],\r\n                skills: []\r\n            })\r\n        }\r\n    }   \r\n    swiftSkillNumber() {\r\n        let number = 0;\r\n        let newSkills = this.state.skills;\r\n        let finalSkills = []\r\n        this.setState({\r\n            skills: []\r\n             \r\n        })\r\n         \r\n        newSkills.map(currentSkill => {\r\n            let newSkill = currentSkill;\r\n            \r\n            newSkill[0].skillId = number;\r\n            finalSkills = [...finalSkills, currentSkill] \r\n            \r\n            \r\n            number++\r\n            \r\n        })\r\n        this.setState({\r\n            skills: finalSkills\r\n        })\r\n\r\n          \r\n    }\r\n    renderSkill(task, key) {\r\n    \r\n            return (\r\n                <div className=\"alignIcon skill\"  id={task[0].skillId} key={task[0].skillId}>\r\n                    <div>\r\n                        <p>{task[0].skillId + 1}.</p>\r\n                        <p>{task[1].skillText}</p>\r\n                    </div>\r\n                    <FontAwesomeIcon icon={faTrash} onClick={this.deleteSkill}/>\r\n                </div>\r\n            )\r\n        \r\n         \r\n    }\r\n    enableSkills(){\r\n         this.setState({\r\n            enableSkills: true\r\n        })\r\n    }\r\n    updateState(newValue) {\r\n        // console.log(this.state.skills.length)\r\n        this.setState({\r\n            skill: [{\r\n                skillId: this.state.skills.length\r\n            },{\r\n                skillText: newValue\r\n            }]\r\n        })\r\n        // console.log(this.state.skills)\r\n    }\r\n\r\n    updateField(e) {\r\n        this.updateState(e.target.value);\r\n        // console.log(e.target.className)\r\n         \r\n    }\r\n    renderMode(mode) {\r\n        if(mode === 'edit') {\r\n            return <this.renderEditMode />\r\n        } else {\r\n            return <this.renderPreviewMode />\r\n        }\r\n    }\r\n    render(){\r\n        return (\r\n            this.renderMode(this.props.mode)        \r\n        )\r\n    }\r\n}\r\nexport default Skills","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlusSquare } from '@fortawesome/free-solid-svg-icons'\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport Moment from 'moment'\r\n\r\nclass Education extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            enableEducation: false,\r\n            educationArr: [],\r\n            currentEd: {\r\n                id: 0,\r\n                institution: '',\r\n                degree: '',\r\n                city: '',\r\n                startDate: new Date(),\r\n                endDate: new Date(),\r\n                mentions: ''\r\n            }, \r\n         };\r\n\r\n        this.renderPreviewMode = this.renderPreviewMode.bind(this)\r\n        this.renderEditMode = this.renderEditMode.bind(this)\r\n        this.enableEducation = this.enableEducation.bind(this)\r\n        this.handleStartDate = this.handleStartDate.bind(this);\r\n        this.handleEndDate = this.handleEndDate.bind(this);\r\n        this.updateField = this.updateField.bind(this);\r\n        this.addNewEducation = this.addNewEducation.bind(this);\r\n        this.renderEducationItem = this.renderEducationItem.bind(this)\r\n        this.deleteEducationItem = this.deleteEducationItem.bind(this)\r\n        this.deleteEducationState = this.deleteEducationState.bind(this)\r\n        this.swiftEducationItemNumber = this.swiftEducationItemNumber.bind(this)\r\n     }\r\n    \r\n    renderPreviewMode(){\r\n        if(this.state.enableEducation == true) {\r\n            return (\r\n                <section className=\"cvEducation alignIcon\">\r\n                    <div className=\"sectionDescription\">\r\n                        <h5>Education</h5>\r\n                    </div>\r\n                    <div className=\"sectionContent\">\r\n       \r\n                        {this.state.educationArr.map((educationItem, key) => this.renderEducationItem(educationItem, key) )} \r\n                    \r\n                </div>\r\n                </section>\r\n            )\r\n        } else {\r\n            return (\r\n                ''\r\n            )\r\n        } \r\n    }\r\n    renderEditMode(){\r\n        let autoHeight = function() {\r\n            let element = document.querySelector('.mentions');\r\n            element.style.height = \"5px\";\r\n            element.style.height = (element.scrollHeight)+\"px\";\r\n        }       \r\n         if(this.state.enableEducation == true) {\r\n            return (\r\n                <section className=\"cvEducation alignIcon\">\r\n                    <div className=\"sectionDescription\">\r\n                        <h5>Education</h5>\r\n                    </div>\r\n                    <div className=\"sectionContent\">\r\n       \r\n                        {this.state.educationArr.map((educationItem, key) => this.renderEducationItem(educationItem, key) )} \r\n                         \r\n                        <div className=\"addEducationEntry\">\r\n                            <label className=\"textareaLabel\">Institution name</label>\r\n                            <textarea className=\"institution\" rows=\"1\" onChange={this.updateField} placeholder=\"Add institution\" value={this.state.currentEd.institution}/>\r\n                            <label className=\"textareaLabel\">Degree</label>\r\n                            <textarea className=\"degree\" rows=\"1\" onChange={this.updateField} placeholder=\"Degree\" value={this.state.currentEd.degree}/>\r\n                            <label className=\"textareaLabel\">City</label>\r\n                            <textarea className=\"city\" rows=\"1\" onChange={this.updateField}  placeholder=\"City\" value={this.state.currentEd.city}/>\r\n                            <div className=\"educationDatepickerWrap\">\r\n                                <div className=\"startDate\">\r\n                                    <label className=\"textareaLabel\">From:</label>                         \r\n                                    <DatePicker\r\n                                        selected={ this.state.currentEd.startDate }\r\n                                        onChange={ this.handleStartDate }\r\n                                        dateFormat=\"MMMM/yyyy\"\r\n                                        showMonthYearPicker\r\n                                        showFullMonthYearPicker\r\n                                    />\r\n                                </div>\r\n                                <div>\r\n                                    <label className=\"textareaLabel\">Until:</label>                         \r\n                                    <DatePicker\r\n                                        selected={ this.state.currentEd.endDate }\r\n                                        onChange = {this.handleEndDate}\r\n                                        dateFormat=\"MMMM/yyyy\"\r\n                                        showMonthYearPicker\r\n                                        showFullMonthYearPicker\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <label className=\"textareaLabel\">Mentions</label>\r\n                            <textarea className=\"mentions\" rows=\"2\" onInput={autoHeight} onChange={this.updateField}  placeholder=\"Mentions\" value={this.state.currentEd.mentions}/>\r\n                            <br/>\r\n                            <div className=\"alignIcon\">\r\n                                <p>Add education</p>\r\n                                <FontAwesomeIcon icon={faPlusSquare} onClick={this.addNewEducation}/>\r\n                            </div>\r\n                            <div className=\"deleteItemWrapper\"> \r\n                                <p>Delete education</p>\r\n                                <FontAwesomeIcon icon={faTrash} onClick={this.deleteEducationState}/>\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n                </section>\r\n            )\r\n        } else {\r\n            return (\r\n                <section className=\"cvEducation alignIcon\">\r\n                    <p className=\"descriptionParagraph\">Add education</p>\r\n                    <FontAwesomeIcon icon={faPlusSquare} onClick={this.enableEducation}/>\r\n                </section>\r\n            )\r\n        } \r\n        \r\n    }\r\n    enableEducation() {\r\n        this.setState({\r\n            enableEducation: true\r\n        })\r\n    }\r\n    handleStartDate(date) { \r\n          this.setState({\r\n            currentEd: {\r\n                id: this.state.currentEd.id,\r\n                institution: this.state.currentEd.institution,\r\n                degree: this.state.currentEd.degree,\r\n                city: this.state.currentEd.city,\r\n                startDate: date,\r\n                endDate: this.state.currentEd.endDate,\r\n                mentions: this.state.currentEd.mentions\r\n\r\n            }\r\n        })\r\n     }\r\n    handleEndDate(date) { \r\n         this.setState({\r\n            currentEd: {\r\n                id: this.state.currentEd.id,\r\n                institution: this.state.currentEd.institution,\r\n                degree: this.state.currentEd.degree,\r\n                city: this.state.currentEd.city,\r\n                startDate: this.state.currentEd.startDate,\r\n                endDate: date,\r\n                mentions: this.state.currentEd.mentions\r\n            }\r\n        })\r\n     }\r\n    \r\n    renderMode(mode) {\r\n        if(mode === 'edit') {\r\n            return <this.renderEditMode />\r\n        } else {\r\n            return <this.renderPreviewMode />\r\n        }\r\n    }\r\n\r\n    updateState(toUpdate, newValue) {\r\n        let temp = {...this.state.currentEd};\r\n         \r\n        Object.keys(temp).map( child => {\r\n            temp.id = this.state.educationArr.length;\r\n\r\n            if(toUpdate == 'institution') {\r\n                temp.institution = newValue\r\n            } else if (toUpdate == \"degree\"){\r\n                temp.degree = newValue\r\n            } else if (toUpdate == 'city'){\r\n                temp.city = newValue\r\n            } else if(toUpdate == \"mentions\") {\r\n                temp.mentions = newValue\r\n            }\r\n        })\r\n        this.setState({\r\n            currentEd: temp\r\n        })\r\n     }\r\n    updateField(e) {\r\n        this.updateState(e.target.className, e.target.value);\r\n    }\r\n    addNewEducation(){\r\n        const currentEd = this.state.currentEd;\r\n        if(currentEd.institution != '' && currentEd.degree != '' && currentEd.city != '' ) {\r\n            this.setState({\r\n                educationArr: [...this.state.educationArr, currentEd], \r\n                currentEd: {\r\n                    id: this.state.educationArr.length,\r\n                    institution: '',\r\n                    degree: '',\r\n                    city: '',\r\n                    startDate: new Date(),\r\n                    endDate: new Date(),\r\n                    mentions: ''\r\n                },  \r\n             })\r\n        } else {\r\n            alert(\"Please input the required fields(Institution, Degree and City where you studied)\")\r\n        }\r\n     }\r\n    renderEducationItem(item, key){\r\n        let icon\r\n\r\n        if(this.props.mode == \"edit\") {\r\n            icon =  <div className=\"deleteItemWrapper\"> \r\n                        <p>Delete education item</p>\r\n                        <FontAwesomeIcon icon={faTrash} onClick={this.deleteEducationItem}/>\r\n                    </div>\r\n        } else {\r\n            icon = ''\r\n        }\r\n\r\n        return (\r\n            <div className='educationItem' id={item.id} key={item.id}>\r\n                <h4>{item.institution}</h4>\r\n                <p><i>{item.degree}</i></p>\r\n                <p>{item.city}</p> \r\n                <p>{Moment(item.startDate).format('MMMM YYYY')} - {Moment(item.endDate).format('MMMM YYYY')}</p>\r\n                <p>{item.mentions}</p>\r\n                {icon}\r\n            </div>\r\n        ) \r\n    }\r\n\r\n    deleteEducationItem(e) {\r\n        let elementId = e.target.parentNode.parentNode.parentNode.id;\r\n        let newEducationItems = this.state.educationArr;\r\n\r\n         \r\n        newEducationItems.splice(elementId, 1)\r\n         this.setState({\r\n            educationArr: newEducationItems\r\n        })\r\n        \r\n        //after deleting an item, the Id's set up initially would remaing the same, for example: we have item0, item1, item2, we delete item1, we are left \r\n        //with item0 and item2, upon trying to delete item2, the delete button would ask the delete function to delete the item with the id of 2, but\r\n        //since we've deleted item 1, our array has only 2 items, item0 and item1, the following functions iterates over the array's items, and updates the id accordingly\r\n        this.swiftEducationItemNumber()\r\n\r\n    }\r\n    deleteEducationState() {\r\n        if( window.confirm(\"Are you sure you want to delete all Education items submitted?\") ){\r\n            this.setState({\r\n                enableEducation: false,\r\n                educationArr: [],\r\n                currentEd: {\r\n                    id: 0,\r\n                    institution: '',\r\n                    degree: '',\r\n                    city: '',\r\n                    startDate: new Date(),\r\n                    endDate: new Date(),\r\n                    mentions: ''\r\n                }, \r\n            })\r\n        }\r\n    }\r\n       \r\n    swiftEducationItemNumber() {\r\n        let number = 0;\r\n        let newEducationItems = this.state.educationArr;\r\n        let finalEducationItems = []\r\n\r\n        this.setState({\r\n            educationArr: []\r\n             \r\n        })\r\n         \r\n        newEducationItems.map(currentItem => {\r\n            let newItem = currentItem;\r\n            newItem.id = number;\r\n            finalEducationItems = [...finalEducationItems, currentItem] \r\n \r\n            number++\r\n            \r\n        })\r\n        this.setState({\r\n            educationArr: finalEducationItems\r\n        })\r\n\r\n          \r\n    }\r\n    render(){\r\n        return (\r\n            this.renderMode(this.props.mode)        \r\n        )\r\n    }\r\n}\r\nexport default Education","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlusSquare } from '@fortawesome/free-solid-svg-icons'\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport Moment from 'moment'\r\n\r\nclass Experience extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            enableExperience: false,\r\n            experienceArr: [],\r\n            currentExp: {\r\n                id: 0,\r\n                company: '',\r\n                jobTitle: '',\r\n                city: '',\r\n                startDate: new Date(),\r\n                endDate: new Date(),\r\n                mentions: ''\r\n            }, \r\n         };\r\n\r\n        this.renderPreviewMode = this.renderPreviewMode.bind(this)\r\n        this.renderEditMode = this.renderEditMode.bind(this)\r\n        this.enableExperience = this.enableExperience.bind(this)\r\n        this.handleStartDate = this.handleStartDate.bind(this);\r\n        this.handleEndDate = this.handleEndDate.bind(this);\r\n        this.updateField = this.updateField.bind(this);\r\n        this.addNewExperience = this.addNewExperience.bind(this);\r\n        this.renderExperienceItem = this.renderExperienceItem.bind(this)\r\n        this.deleteExperienceItem = this.deleteExperienceItem.bind(this)\r\n        this.deleteExperienceState = this.deleteExperienceState.bind(this);\r\n        this.swiftExperienceItemNumber = this.swiftExperienceItemNumber.bind(this)\r\n     }\r\n    \r\n    renderPreviewMode(){\r\n        if(this.state.enableExperience == true) {\r\n            return (\r\n                <section className=\"cvExperience alignIcon\">\r\n                    <div className=\"sectionDescription\">\r\n                        <h5>Experience</h5>\r\n                    </div>\r\n                    <div className=\"sectionContent\">\r\n       \r\n                        {this.state.experienceArr.map((experienceItem, key) => this.renderExperienceItem(experienceItem, key) )} \r\n                    \r\n                </div>\r\n                </section>\r\n            )\r\n        } else {\r\n            return (\r\n                ''\r\n            )\r\n        } \r\n    }\r\n    renderEditMode(){\r\n        let autoHeight = function() {\r\n            let element = document.querySelector('.mentions');\r\n            element.style.height = \"5px\";\r\n            element.style.height = (element.scrollHeight)+\"px\";\r\n        }       \r\n         if(this.state.enableExperience == true) {\r\n            return (\r\n                <section className=\"cvExperience alignIcon\">\r\n                    <div className=\"sectionDescription\">\r\n                        <h5>Experience</h5>\r\n                    </div>\r\n                    <div className=\"sectionContent\">\r\n       \r\n                        {this.state.experienceArr.map((experienceItem, key) => this.renderExperienceItem(experienceItem, key) )} \r\n                         \r\n                        <div className=\"addExperienceEntry\">\r\n                            <label className=\"textareaLabel\">Company name*</label>\r\n                            <textarea className=\"company\" rows=\"1\" onChange={this.updateField} placeholder=\"Add company\" value={this.state.currentExp.company}/>\r\n                            <label className=\"textareaLabel\">Job title*</label>\r\n                            <textarea className=\"jobTitle\" rows=\"1\" onChange={this.updateField} placeholder=\"Job title\" value={this.state.currentExp.jobTitle}/>\r\n                            <label className=\"textareaLabel\">City</label>\r\n                            <textarea className=\"city\" rows=\"1\" onChange={this.updateField}  placeholder=\"City\" value={this.state.currentExp.city}/>\r\n                            <div className=\"experienceDatepickerWrap\">\r\n                                <div className=\"startDate\">\r\n                                    <label className=\"textareaLabel\">From:</label>                         \r\n                                    <DatePicker\r\n                                        selected={ this.state.currentExp.startDate }\r\n                                        onChange={ this.handleStartDate }\r\n                                        dateFormat=\"MMMM/yyyy\"\r\n                                        showMonthYearPicker\r\n                                        showFullMonthYearPicker\r\n                                    />\r\n                                </div>\r\n                                <div>\r\n                                    <label className=\"textareaLabel\">Until:</label>                         \r\n                                    <DatePicker\r\n                                        selected={ this.state.currentExp.endDate }\r\n                                        onChange = {this.handleEndDate}\r\n                                        dateFormat=\"MMMM/yyyy\"\r\n                                        showMonthYearPicker\r\n                                        showFullMonthYearPicker\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <label className=\"textareaLabel\">Mentions</label>\r\n                            <textarea className=\"mentions\" rows=\"2\" onInput={autoHeight} onChange={this.updateField}  placeholder=\"Mentions\" value={this.state.currentExp.mentions}/>\r\n                            <br/>\r\n                            <div className=\"alignIcon\">\r\n                                <p>Add experience</p>\r\n                                <FontAwesomeIcon icon={faPlusSquare} onClick={this.addNewExperience}/>\r\n                            </div>\r\n                            <div className=\"deleteItemWrapper\"> \r\n                                <p>Delete experience</p>\r\n                                <FontAwesomeIcon icon={faTrash} onClick={this.deleteExperienceState}/>\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n                </section>\r\n            )\r\n        } else {\r\n            return (\r\n                <section className=\"cvExperience alignIcon\">\r\n                    <p className=\"descriptionParagraph\">Add Experience</p>\r\n                    <FontAwesomeIcon icon={faPlusSquare} onClick={this.enableExperience}/>\r\n                </section>\r\n            )\r\n        } \r\n        \r\n    }\r\n    enableExperience() {\r\n        this.setState({\r\n            enableExperience: true\r\n        })\r\n    }\r\n    handleStartDate(date) { \r\n          this.setState({\r\n            currentExp: {\r\n                id: this.state.currentExp.id,\r\n                company: this.state.currentExp.company,\r\n                jobTitle: this.state.currentExp.jobTitle,\r\n                city: this.state.currentExp.city,\r\n                startDate: date,\r\n                endDate: this.state.currentExp.endDate,\r\n                mentions: this.state.currentExp.mentions\r\n\r\n            }\r\n        })\r\n     }\r\n    handleEndDate(date) { \r\n         this.setState({\r\n            currentExp: {\r\n                id: this.state.currentExp.id,\r\n                company: this.state.currentExp.company,\r\n                jobTitle: this.state.currentExp.jobTitle,\r\n                city: this.state.currentExp.city,\r\n                startDate: this.state.currentExp.startDate,\r\n                endDate: date,\r\n                mentions: this.state.currentExp.mentions\r\n            }\r\n        })\r\n     }\r\n    \r\n    renderMode(mode) {\r\n        if(mode === 'edit') {\r\n            return <this.renderEditMode />\r\n        } else {\r\n            return <this.renderPreviewMode />\r\n        }\r\n    }\r\n\r\n    updateState(toUpdate, newValue) {\r\n        let temp = {...this.state.currentExp};\r\n         \r\n        Object.keys(temp).map( child => {\r\n            temp.id = this.state.experienceArr.length;\r\n\r\n            if(toUpdate == 'company') {\r\n                temp.company = newValue\r\n            } else if (toUpdate == \"jobTitle\"){\r\n                temp.jobTitle = newValue\r\n            } else if (toUpdate == 'city'){\r\n                temp.city = newValue\r\n            } else if(toUpdate == \"mentions\") {\r\n                temp.mentions = newValue\r\n            }\r\n        })\r\n        this.setState({\r\n            currentExp: temp\r\n        })\r\n     }\r\n    updateField(e) {\r\n        this.updateState(e.target.className, e.target.value);\r\n    }\r\n    addNewExperience(){\r\n        const currentExp = this.state.currentExp;\r\n        if(currentExp.company != '' && currentExp.jobTitle != '' && currentExp.city != '' ) {\r\n            this.setState({\r\n                experienceArr: [...this.state.experienceArr, currentExp], \r\n                currentExp: {\r\n                    id: this.state.experienceArr.length,\r\n                    company: '',\r\n                    jobTitle: '',\r\n                    city: '',\r\n                    startDate: new Date(),\r\n                    endDate: new Date(),\r\n                    mentions: ''\r\n                },  \r\n             })\r\n        } else {\r\n            alert(\"Please input the required fields(company, job title)\")\r\n        }\r\n     }\r\n    renderExperienceItem(item, key){\r\n        let icon\r\n\r\n        if(this.props.mode == \"edit\") {\r\n            icon =  <div className=\"deleteItemWrapper\"> \r\n                        <p>Delete experience item</p>\r\n                        <FontAwesomeIcon icon={faTrash} onClick={this.deleteExperienceItem}/>\r\n                    </div>\r\n        } else {\r\n            icon = ''\r\n        }\r\n\r\n        return (\r\n            <div className='experienceItem' id={item.id} key={item.id}>\r\n                <h4>{item.company}</h4>\r\n                <p><i>{item.jobTitle}</i></p>\r\n                <p>{item.city}</p> \r\n                <p>{Moment(item.startDate).format('MMMM YYYY')} - {Moment(item.endDate).format('MMMM YYYY')}</p>\r\n                <p>{item.mentions}</p>\r\n                {icon}\r\n            </div>\r\n        ) \r\n    }\r\n\r\n    deleteExperienceItem(e) {\r\n        let elementId = e.target.parentNode.parentNode.parentNode.id;\r\n        let newExperienceItems = this.state.experienceArr;\r\n\r\n         \r\n        newExperienceItems.splice(elementId, 1)\r\n         this.setState({\r\n            experienceArr: newExperienceItems\r\n        })\r\n        \r\n        //after deleting an item, the Id's set up initially would remaing the same, for example: we have item0, item1, item2, we delete item1, we are left \r\n        //with item0 and item2, upon trying to delete item2, the delete button would ask the delete function to delete the item with the id of 2, but\r\n        //since we've deleted item 1, our array has only 2 items, item0 and item1, the following functions iterates over the array's items, and updates the id accordingly\r\n        this.swiftExperienceItemNumber()\r\n\r\n    }\r\n    deleteExperienceState() {\r\n        if( window.confirm(\"Are you sure you want to delete all Experience items submitted?\") ){\r\n            this.setState({\r\n                enableExperience: false,\r\n                experienceArr: [],\r\n                currentExp: {\r\n                    id: 0,\r\n                    company: '',\r\n                    jobTitle: '',\r\n                    city: '',\r\n                    startDate: new Date(),\r\n                    endDate: new Date(),\r\n                    mentions: ''\r\n                }, \r\n            })\r\n        }\r\n    }   \r\n    swiftExperienceItemNumber() {\r\n        let number = 0;\r\n        let newExperienceItems = this.state.experienceArr;\r\n        let finalExperienceItems = []\r\n\r\n        this.setState({\r\n            experienceArr: []\r\n             \r\n        })\r\n         \r\n        newExperienceItems.map(currentItem => {\r\n            let newItem = currentItem;\r\n            newItem.id = number;\r\n            finalExperienceItems = [...finalExperienceItems, currentItem] \r\n \r\n            number++\r\n            \r\n        })\r\n        this.setState({\r\n            experienceArr: finalExperienceItems\r\n        })\r\n\r\n          \r\n    }\r\n    render(){\r\n        return (\r\n            this.renderMode(this.props.mode)        \r\n        )\r\n    }\r\n}\r\nexport default Experience","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlusSquare } from '@fortawesome/free-solid-svg-icons'\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport Moment from 'moment'\r\n\r\nclass Custom extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            enableCustom: false,\r\n            customArr: [],\r\n            currentCustom: {\r\n                customDescription: '' ,\r\n                id: 0,\r\n                title: '',\r\n                description: ''\r\n            }, \r\n         };\r\n\r\n        this.renderPreviewMode = this.renderPreviewMode.bind(this)\r\n        this.renderEditMode = this.renderEditMode.bind(this)\r\n        this.enableCustom = this.enableCustom.bind(this)\r\n         \r\n        this.updateField = this.updateField.bind(this);\r\n        this.addNewCustom = this.addNewCustom.bind(this);\r\n        this.renderCustomItem = this.renderCustomItem.bind(this)\r\n        this.deleteExperienceItem = this.deleteExperienceItem.bind(this)\r\n        this.deleteCustomState = this.deleteCustomState.bind(this);\r\n        this.swiftExperienceItemNumber = this.swiftExperienceItemNumber.bind(this)\r\n     }\r\n    \r\n    renderPreviewMode(){\r\n        if(this.state.enableCustom == true) {\r\n            return (\r\n                <section className=\"cvExperience alignIcon\">\r\n                    <div className=\"sectionDescription customDescription\">\r\n                        <h5>{this.state.currentCustom.customDescription}</h5>\r\n                    </div>\r\n                    <div className=\"sectionContent\">\r\n       \r\n                        {this.state.customArr.map((experienceItem, key) => this.renderCustomItem(experienceItem, key) )} \r\n                    \r\n                </div>\r\n                </section>\r\n            )\r\n        } else {\r\n            return (\r\n                ''\r\n            )\r\n        } \r\n    }\r\n    renderEditMode(){\r\n        let autoHeight = function() {\r\n            let element = document.querySelector('.description');\r\n            element.style.height = \"5px\";\r\n            element.style.height = (element.scrollHeight)+\"px\";\r\n        }       \r\n         if(this.state.enableCustom == true) {\r\n            return (\r\n                <section className=\"cvCustom alignIcon\">\r\n                    <div className=\"sectionDescription customDescription\">\r\n                        <textarea className=\"customDescription\" rows=\"7\" onChange={this.updateField} placeholder=\"Section title\" value={this.state.currentCustom.customDescription}/>\r\n                    </div>\r\n                    <div className=\"sectionContent\">\r\n       \r\n                        {this.state.customArr.map((experienceItem, key) => this.renderCustomItem(experienceItem, key) )} \r\n                         \r\n                        <div className=\"addExperienceEntry\">\r\n                            <label className=\"textareaLabel\">Custom item title*</label>\r\n                            <textarea className=\"title\" rows=\"1\" onChange={this.updateField} placeholder=\"Title\" value={this.state.currentCustom.title}/>\r\n                            <label className=\"textareaLabel\">Custom item description*</label>   \r\n                            <textarea className=\"description\" rows=\"1\" onInput={autoHeight}onChange={this.updateField} placeholder=\"Description\" value={this.state.currentCustom.description}/>\r\n                           \r\n                            <div className=\"alignIcon\">\r\n                                <p>Add experience</p>\r\n                                <FontAwesomeIcon icon={faPlusSquare} onClick={this.addNewCustom}/>\r\n                            </div>\r\n\r\n                            <div className=\"deleteItemWrapper\"> \r\n                                <p>Delete custom</p>\r\n                                <FontAwesomeIcon icon={faTrash} onClick={this.deleteCustomState}/>\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n                </section>\r\n            )\r\n        } else {\r\n            return (\r\n                <section className=\"cvExperience alignIcon\">\r\n                    <p className=\"descriptionParagraph\">Add custom section</p>\r\n                    <FontAwesomeIcon icon={faPlusSquare} onClick={this.enableCustom}/>\r\n                </section>\r\n            )\r\n        } \r\n        \r\n    }\r\n    enableCustom() {\r\n        this.setState({\r\n            enableCustom: true\r\n        })\r\n    }\r\n    \r\n    renderMode(mode) {\r\n        if(mode === 'edit') {\r\n            return <this.renderEditMode />\r\n        } else {\r\n            return <this.renderPreviewMode />\r\n        }\r\n    }\r\n\r\n    updateState(toUpdate, newValue) {\r\n        let temp = {...this.state.currentCustom};\r\n         \r\n        Object.keys(temp).map( child => {\r\n            temp.id = this.state.customArr.length;\r\n\r\n            if(toUpdate == 'title') {\r\n                temp.title = newValue\r\n            } else if (toUpdate == \"description\"){\r\n                temp.description = newValue\r\n            } else if (toUpdate == 'customDescription'){\r\n                temp.customDescription = newValue\r\n            }  \r\n        })\r\n        this.setState({\r\n            currentCustom: temp\r\n        })\r\n        // console.log(this.state.currentCustom.customDescription)\r\n     }\r\n    updateField(e) {\r\n        this.updateState(e.target.className, e.target.value);\r\n    }\r\n    addNewCustom(){\r\n        const currentCustom = this.state.currentCustom;\r\n\r\n        if(currentCustom.title != '' && currentCustom.description != '') {\r\n            this.setState({\r\n                customArr: [...this.state.customArr, currentCustom], \r\n                currentCustom: {\r\n                    customDescription: this.state.currentCustom.customDescription ,\r\n                    id: this.state.customArr.length,\r\n                    title: '',\r\n                    description: '',\r\n                },  \r\n             })\r\n            // console.log(this.state.currentCustom) \r\n        } else {\r\n            alert(\"Please add a title and a description to your customer item.)\")\r\n        }\r\n     }\r\n    renderCustomItem(item, key){\r\n        let icon\r\n\r\n        if(this.props.mode == \"edit\") {\r\n            icon =  <div className=\"deleteItemWrapper\"> \r\n                        <p>Delete customer item</p>\r\n                        <FontAwesomeIcon icon={faTrash} onClick={this.deleteExperienceItem}/>\r\n                    </div>\r\n        } else {\r\n            icon = ''\r\n        }\r\n\r\n        return (\r\n            <div className='customerItem' id={item.id} key={item.id}>\r\n                <h4>{item.title}</h4>\r\n                <p>{item.description} </p>\r\n              \r\n                {icon}\r\n            </div>\r\n        ) \r\n    }\r\n\r\n    deleteExperienceItem(e) {\r\n        let elementId = e.target.parentNode.parentNode.parentNode.id;\r\n        let newCustomItems = this.state.customArr;\r\n\r\n         \r\n        newCustomItems.splice(elementId, 1)\r\n         this.setState({\r\n            customArr: newCustomItems\r\n        })\r\n        \r\n        //after deleting an item, the Id's set up initially would remaing the same, for example: we have item0, item1, item2, we delete item1, we are left \r\n        //with item0 and item2, upon trying to delete item2, the delete button would ask the delete function to delete the item with the id of 2, but\r\n        //since we've deleted item 1, our array has only 2 items, item0 and item1, the following functions iterates over the array's items, and updates the id accordingly\r\n        this.swiftExperienceItemNumber()\r\n\r\n    }\r\n    deleteCustomState() {\r\n        if( window.confirm(\"Are you sure you want to delete all custom items added?\") ){\r\n            this.setState({\r\n                enableCustom: false,\r\n                customArr: [],\r\n                currentCustom: {\r\n                    customDescription: '' ,\r\n                    id: 0,\r\n                    title: '',\r\n                    description: ''\r\n                },  \r\n            })\r\n        }\r\n    }   \r\n    swiftExperienceItemNumber() {\r\n        let number = 0;\r\n        let newExperienceItems = this.state.customArr;\r\n        let finalExperienceItems = []\r\n\r\n        this.setState({\r\n            customArr: []\r\n             \r\n        })\r\n         \r\n        newExperienceItems.map(currentItem => {\r\n            let newItem = currentItem;\r\n            newItem.id = number;\r\n            finalExperienceItems = [...finalExperienceItems, currentItem] \r\n \r\n            number++\r\n            \r\n        })\r\n        this.setState({\r\n            customArr: finalExperienceItems\r\n        })\r\n\r\n          \r\n    }\r\n    render(){\r\n        return (\r\n            this.renderMode(this.props.mode)        \r\n        )\r\n    }\r\n}\r\nexport default Custom","import React from 'react';\nimport './App.css';\nimport Intro from './components/cv-intro.js';\nimport ModeButtons from './components/modeButtons';\nimport Summary from './components/cv-summary';\nimport Skills from './components/cv-skills'\nimport Education from './components/cv-education'\nimport Experience from './components/cv-experience'\nimport Custom from './components/cv-custom'\n\nclass App extends React.Component {\n  constructor(props){\n      super(props);\n\n      this.state = {\n        currentMode: 'edit'\n      }\n\n\n      this.getCurrentMode = this.getCurrentMode.bind(this);\n      this.toggleButtonClass = this.toggleButtonClass.bind(this);\n    }\n  \n\n  //the following two methods were lifted from the modeButton component, in order\n  //to set an global currentMode state, so that all the components would update at \n  //once after we select the edit/preview mode\n  toggleButtonClass(e) {\n      let buttons = Array.from(document.querySelectorAll(\".changeModeButton\"));\n      buttons.map( button => {\n          button.classList.remove(\"button-active\")\n      })\n      e.target.classList.add(\"button-active\");\n      this.getCurrentMode();\n  }\n  \n  getCurrentMode() {\n    let editButton = document.querySelector(\".editButton\");\n\n    if(editButton.classList.contains(\"button-active\")){\n        this.setState({\n          currentMode: 'edit'\n        })\n    } else {\n        this.setState({\n          currentMode: 'preview'\n        })\n    }\n \n  }\n\n  render() {\n    \n      return (\n          <div className=\"App\">            \n            <ModeButtons toggleFunction={this.toggleButtonClass} onClick={this.getCurrentMode} />\n            <header className=\"App-header\">\n              <Intro  mode={this.state.currentMode} />\n              <Summary mode={this.state.currentMode} />\n              <Skills mode={this.state.currentMode} />   \n              <Education mode={this.state.currentMode} />      \n              <Experience mode={this.state.currentMode} />           \n              <Custom mode={this.state.currentMode} />\n            </header>\n          </div>\n      );\n      \n  }\n  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}